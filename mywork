import psutil


def virt_mem():
    mem={}
    data = psutil.virtual_memory()
    mem.update(Total_MEM=round(data.total/1000000000,2),Available_MEM=round(data.available/1000000000,2),
               Used_MEM=round(data.used/1000000000,2),MEM_usage=round(data.percent))
    return mem


def cpu_info():
    cpu = {}
    info = psutil.cpu_times()
    cpu.update(user=round(info.user,2),system= round(info.system,2),idle=round(info.idle,2))
    return cpu


def disk_info():
    disk = {}
    data = psutil.disk_usage('/')
    disk.update(Total=round(data.total/1000000000,2), Used= round(data.used/1000000000,2),
                Free=round(data.free/1000000000,2), Percent= data.percent)
    return disk


def show(m,k,dis):
    header_for_CPU ='|{:*^60}'.format('CPU') +'\n'
    header_for_CPU +='|'+ '_'*60 + '|'+'\n'
    for i in k:
        header_for_CPU += '|{:^30}'.format(i) +'|{:^29}|'.format(k[i])+'\n'
        header_for_CPU += '|'+ '_'*60  + '|'+ '\n'
    
    header_for_Memory = '|{:*^60}|'.format('MEMORY') +'\n'
    header_for_Memory += '|'+ '_'*60 + '|'+'\n'
    for j in m:
        if j == 'MEM_usage':
            header_for_Memory += '|{:^30}'.format(j) + '|{:^29}|'.format(str(m[j]) + '%')+'\n'
        else:
            header_for_Memory += '|{:^30}'.format(j) +'|{:^29}|'.format(m[j])+'\n'
            header_for_Memory += '|'+ '_'*60 + '|'+'\n'
            
    header_for_Disk = '|{:*^60}|'.format('DISK') +'\n'
    header_for_Disk += '|'+ '_'*60 + '|'+'\n'  
    for r in dis:
        header_for_Disk += '|{:^30}'.format(r) +'|{:^29}|'.format(dis[r])+'\n'
        header_for_Disk += '|'+ '_'*60 + '|'+'\n'

    print(header_for_CPU,header_for_Memory,header_for_Disk)  


def main():
    k=cpu_info()
    m = virt_mem()
    dis= disk_info()
    show(m,k,dis)
    

if __name__ =='__main__':
    main()
    